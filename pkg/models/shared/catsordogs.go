// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CatsOrDogsValueType string

const (
	CatsOrDogsValueTypeArrayOfCat CatsOrDogsValueType = "arrayOfCat"
	CatsOrDogsValueTypeArrayOfDog CatsOrDogsValueType = "arrayOfDog"
)

type CatsOrDogsValue struct {
	ArrayOfCat []Cat
	ArrayOfDog []Dog

	Type CatsOrDogsValueType
}

func CreateCatsOrDogsValueArrayOfCat(arrayOfCat []Cat) CatsOrDogsValue {
	typ := CatsOrDogsValueTypeArrayOfCat

	return CatsOrDogsValue{
		ArrayOfCat: arrayOfCat,
		Type:       typ,
	}
}

func CreateCatsOrDogsValueArrayOfDog(arrayOfDog []Dog) CatsOrDogsValue {
	typ := CatsOrDogsValueTypeArrayOfDog

	return CatsOrDogsValue{
		ArrayOfDog: arrayOfDog,
		Type:       typ,
	}
}

func (u *CatsOrDogsValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfCat := []Cat{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfCat); err == nil {
		u.ArrayOfCat = arrayOfCat
		u.Type = CatsOrDogsValueTypeArrayOfCat
		return nil
	}

	arrayOfDog := []Dog{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfDog); err == nil {
		u.ArrayOfDog = arrayOfDog
		u.Type = CatsOrDogsValueTypeArrayOfDog
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CatsOrDogsValue) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCat != nil {
		return json.Marshal(u.ArrayOfCat)
	}

	if u.ArrayOfDog != nil {
		return json.Marshal(u.ArrayOfDog)
	}

	return nil, nil
}

// CatsOrDogs - Case 2
type CatsOrDogs struct {
	Value CatsOrDogsValue
}

func (o *CatsOrDogs) GetValue() CatsOrDogsValue {
	if o == nil {
		return CatsOrDogsValue{}
	}
	return o.Value
}
