// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ArrayOfCatOrDogObjectsValueType string

const (
	ArrayOfCatOrDogObjectsValueTypeCat ArrayOfCatOrDogObjectsValueType = "Cat"
	ArrayOfCatOrDogObjectsValueTypeDog ArrayOfCatOrDogObjectsValueType = "Dog"
)

type ArrayOfCatOrDogObjectsValue struct {
	Cat *Cat
	Dog *Dog

	Type ArrayOfCatOrDogObjectsValueType
}

func CreateArrayOfCatOrDogObjectsValueCat(cat Cat) ArrayOfCatOrDogObjectsValue {
	typ := ArrayOfCatOrDogObjectsValueTypeCat

	return ArrayOfCatOrDogObjectsValue{
		Cat:  &cat,
		Type: typ,
	}
}

func CreateArrayOfCatOrDogObjectsValueDog(dog Dog) ArrayOfCatOrDogObjectsValue {
	typ := ArrayOfCatOrDogObjectsValueTypeDog

	return ArrayOfCatOrDogObjectsValue{
		Dog:  &dog,
		Type: typ,
	}
}

func (u *ArrayOfCatOrDogObjectsValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	cat := new(Cat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cat); err == nil {
		u.Cat = cat
		u.Type = ArrayOfCatOrDogObjectsValueTypeCat
		return nil
	}

	dog := new(Dog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dog); err == nil {
		u.Dog = dog
		u.Type = ArrayOfCatOrDogObjectsValueTypeDog
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ArrayOfCatOrDogObjectsValue) MarshalJSON() ([]byte, error) {
	if u.Cat != nil {
		return json.Marshal(u.Cat)
	}

	if u.Dog != nil {
		return json.Marshal(u.Dog)
	}

	return nil, nil
}

// ArrayOfCatOrDogObjects - Case 4
type ArrayOfCatOrDogObjects struct {
	Value []ArrayOfCatOrDogObjectsValue
}

func (o *ArrayOfCatOrDogObjects) GetValue() []ArrayOfCatOrDogObjectsValue {
	if o == nil {
		return []ArrayOfCatOrDogObjectsValue{}
	}
	return o.Value
}
