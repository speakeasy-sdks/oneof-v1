// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/oneof-v1/pkg/utils"
)

type ValueType string

const (
	ValueTypeCat ValueType = "Cat"
	ValueTypeDog ValueType = "Dog"
)

type Value struct {
	Cat *Cat
	Dog *Dog

	Type ValueType
}

func CreateValueCat(cat Cat) Value {
	typ := ValueTypeCat

	return Value{
		Cat:  &cat,
		Type: typ,
	}
}

func CreateValueDog(dog Dog) Value {
	typ := ValueTypeDog

	return Value{
		Dog:  &dog,
		Type: typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	cat := Cat{}
	if err := utils.UnmarshalJSON(data, &cat, "", true, true); err == nil {
		u.Cat = &cat
		u.Type = ValueTypeCat
		return nil
	}

	dog := Dog{}
	if err := utils.UnmarshalJSON(data, &dog, "", true, true); err == nil {
		u.Dog = &dog
		u.Type = ValueTypeDog
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Cat != nil {
		return utils.MarshalJSON(u.Cat, "", true)
	}

	if u.Dog != nil {
		return utils.MarshalJSON(u.Dog, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

// ArrayOfCatOrDogObjects - Case 4
type ArrayOfCatOrDogObjects struct {
	Value []Value
}

func (o *ArrayOfCatOrDogObjects) GetValue() []Value {
	if o == nil {
		return []Value{}
	}
	return o.Value
}
