// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CatOrDogValueType string

const (
	CatOrDogValueTypeCat CatOrDogValueType = "Cat"
	CatOrDogValueTypeDog CatOrDogValueType = "Dog"
)

type CatOrDogValue struct {
	Cat *Cat
	Dog *Dog

	Type CatOrDogValueType
}

func CreateCatOrDogValueCat(cat Cat) CatOrDogValue {
	typ := CatOrDogValueTypeCat

	return CatOrDogValue{
		Cat:  &cat,
		Type: typ,
	}
}

func CreateCatOrDogValueDog(dog Dog) CatOrDogValue {
	typ := CatOrDogValueTypeDog

	return CatOrDogValue{
		Dog:  &dog,
		Type: typ,
	}
}

func (u *CatOrDogValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	cat := new(Cat)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&cat); err == nil {
		u.Cat = cat
		u.Type = CatOrDogValueTypeCat
		return nil
	}

	dog := new(Dog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dog); err == nil {
		u.Dog = dog
		u.Type = CatOrDogValueTypeDog
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CatOrDogValue) MarshalJSON() ([]byte, error) {
	if u.Cat != nil {
		return json.Marshal(u.Cat)
	}

	if u.Dog != nil {
		return json.Marshal(u.Dog)
	}

	return nil, nil
}

// CatOrDog - Case 1
type CatOrDog struct {
	Value CatOrDogValue
}

func (o *CatOrDog) GetValue() CatOrDogValue {
	if o == nil {
		return CatOrDogValue{}
	}
	return o.Value
}
