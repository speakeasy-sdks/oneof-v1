// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CatsOrADogOrWolvesValueType string

const (
	CatsOrADogOrWolvesValueTypeArrayOfCat  CatsOrADogOrWolvesValueType = "arrayOfCat"
	CatsOrADogOrWolvesValueTypeDog         CatsOrADogOrWolvesValueType = "Dog"
	CatsOrADogOrWolvesValueTypeArrayOfWolf CatsOrADogOrWolvesValueType = "arrayOfWolf"
)

type CatsOrADogOrWolvesValue struct {
	ArrayOfCat  []Cat
	Dog         *Dog
	ArrayOfWolf []Wolf

	Type CatsOrADogOrWolvesValueType
}

func CreateCatsOrADogOrWolvesValueArrayOfCat(arrayOfCat []Cat) CatsOrADogOrWolvesValue {
	typ := CatsOrADogOrWolvesValueTypeArrayOfCat

	return CatsOrADogOrWolvesValue{
		ArrayOfCat: arrayOfCat,
		Type:       typ,
	}
}

func CreateCatsOrADogOrWolvesValueDog(dog Dog) CatsOrADogOrWolvesValue {
	typ := CatsOrADogOrWolvesValueTypeDog

	return CatsOrADogOrWolvesValue{
		Dog:  &dog,
		Type: typ,
	}
}

func CreateCatsOrADogOrWolvesValueArrayOfWolf(arrayOfWolf []Wolf) CatsOrADogOrWolvesValue {
	typ := CatsOrADogOrWolvesValueTypeArrayOfWolf

	return CatsOrADogOrWolvesValue{
		ArrayOfWolf: arrayOfWolf,
		Type:        typ,
	}
}

func (u *CatsOrADogOrWolvesValue) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	arrayOfCat := []Cat{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfCat); err == nil {
		u.ArrayOfCat = arrayOfCat
		u.Type = CatsOrADogOrWolvesValueTypeArrayOfCat
		return nil
	}

	dog := new(Dog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&dog); err == nil {
		u.Dog = dog
		u.Type = CatsOrADogOrWolvesValueTypeDog
		return nil
	}

	arrayOfWolf := []Wolf{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfWolf); err == nil {
		u.ArrayOfWolf = arrayOfWolf
		u.Type = CatsOrADogOrWolvesValueTypeArrayOfWolf
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CatsOrADogOrWolvesValue) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCat != nil {
		return json.Marshal(u.ArrayOfCat)
	}

	if u.Dog != nil {
		return json.Marshal(u.Dog)
	}

	if u.ArrayOfWolf != nil {
		return json.Marshal(u.ArrayOfWolf)
	}

	return nil, nil
}

// CatsOrADogOrWolves - Case 3
type CatsOrADogOrWolves struct {
	Value CatsOrADogOrWolvesValue
}

func (o *CatsOrADogOrWolves) GetValue() CatsOrADogOrWolvesValue {
	if o == nil {
		return CatsOrADogOrWolvesValue{}
	}
	return o.Value
}
